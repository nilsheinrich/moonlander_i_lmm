---
title: "Nils Wendel Heinrich: Sanity check"
subtitle: "Moonlander I - Analysis"
author: "Nils Wendel Heinrich"
date: "2023-10-23"
format:
  html:
    embed-resources: true
    toc: true
    toc-depth: 2
    code-fold: false
    number-sections: true
    fig-width: 8
    fig-height: 6
editor_options:
  chunk_output_type: console
jupyter: julia-1.9
---

## Packages
```{julia}
#| label: packages

using Arrow
using AlgebraOfGraphics
using CairoMakie
using DataFrames
using DataFrameMacros
using MixedModels
using MixedModelsMakie
using Random
#using RCall

CairoMakie.activate!(; type="svg");
```

```{julia}
#| label: constants
const RNG = MersenneTwister(36)
N_iterations = 10000

const AoG = AlgebraOfGraphics;
```

```{julia}
#| label: data

my_data = DataFrame(Arrow.Table("data/Experiment1_SoCData.arrow"))
# 1425 rows

# Filtering runs in which players crashed
my_data = filter(row -> row.done, my_data)
# y_data = filter(row -> !row.done, my_data) # for only crashs

# new variable: level_difficulty based on level
# 1 & 2: easy
# 3 & 4: medium
# 5 & 6: hard


describe(my_data)
```
we will only consider successful runs. Crashs may lead in a strong variance in N_fixations.

### Contrasts

We will declare **ID** as grouping variable as well as define the effects coding for the discrete covariate input noise.

#### Hypothesis Coding

```{julia}
my_cake = Dict(
  :ID => Grouping(),
  :input_noise => HypothesisCoding(
    [
      -1 +1 0
      0 -1 +1
    ];
    levels=["N", "W", "S"],
    labels=["weak-none", "strong-weak"],
  ),
  :level_difficutly => HypothesisCoding(
    [
      -1 +1 0
      0 -1 +1
    ];
    levels=["easy", "medium", "hard"],
    labels=["medium-easy", "hard-medium"],
  ),
);

#contrasts = Dict(:input_noise => EffectsCoding())
```

## Building models

```{julia}
#| label: m_varyingInt1

m_varyingInt1 = let
    varInt = @formula(N_fixations ~ 1 + level_difficulty * drift + input_noise + N_consecutive_crash_success + (1 | ID));
    fit(MixedModel, varInt, my_data; contrasts=my_cake);
  end

issingular(m_varyingInt1) # Not overparamterized
VarCorr(m_varyingInt1)
last(m_varyingInt1.λ)

```
Seems like ID is a viable random effect. Next we will explore random slope effects.

### Model of highest complexity
```{julia}
#| label: m_varyingSlope_complex

m_varyingSlope_complex = let
    varInt = @formula(N_fixations ~ 1 + level_difficulty * drift + input_noise + N_consecutive_crash_success + 
    (1 + level_difficulty * drift + input_noise + N_consecutive_crash_success | ID));
    fit(MixedModel, varInt, my_data; contrasts=my_cake);
  end

issingular(m_varyingSlope_complex) # overparamterized

```
We detect singularity. We will go ahead an delete the interaction terms within the random effects structure.

```{julia}
#| label: m_varyingSlope_complex_ni

m_varyingSlope_complex_ni = let
    varInt = @formula(N_fixations ~ 1 + level_difficulty * drift + input_noise + N_consecutive_crash_success + 
    (1 + level_difficulty + drift + input_noise + N_consecutive_crash_success | ID));
    fit(MixedModel, varInt, my_data; contrasts=my_cake);
  end

issingular(m_varyingSlope_complex_ni) # overparamterized

```
Still singular. Stating zerocorr next.

```{julia}
#| label: m_varyingSlope_complex_zc

m_varyingSlope_complex_zc = let
    varInt = @formula(N_fixations ~ 1 + level_difficulty * drift + input_noise + N_consecutive_crash_success + 
    zerocorr(1 + level_difficulty + drift + input_noise + N_consecutive_crash_success | ID));
    fit(MixedModel, varInt, my_data; contrasts=my_cake);
  end

issingular(m_varyingSlope_complex_zc) # overparamterized

```
That didn't solve singularity. Starting to delete individual random slope effects.

Deleted:
- N_consecutive_crash_success
- input_noise + N_consecutive_crash_success
- drift + input_noise + N_consecutive_crash_success
... detected singularity every single time.

Entering a single slope effect:
- level_difficulty
- input_noise
- N_consecutive_crash_success
does not work,

```{julia}
#| label: m_varyingSlope_

m_varyingSlope_ = let
    varInt = @formula(N_fixations ~ 1 + level_difficulty * drift + input_noise + N_consecutive_crash_success + 
    (1 + drift | ID));
    fit(MixedModel, varInt, my_data; contrasts=my_cake);
  end

issingular(m_varyingSlope_) # overparamterized

```

works:
- drift

```{julia}
#| label: m_varyingSlope_d

m_varyingSlope_d = let
    varInt = @formula(N_fixations ~ 1 + level_difficulty * drift + input_noise + N_consecutive_crash_success + 
    zerocorr(1 + drift | ID));
    fit(MixedModel, varInt, my_data; contrasts=my_cake);
  end

issingular(m_varyingSlope_d) # NOT overparamterized

```

Throwing model against only varying intercept model:
```{julia}

gof_summary = let
  nms = [:m_varyingInt1, :m_varyingSlope_d]
  mods = eval.(nms)
  lrt = MixedModels.likelihoodratiotest(m_varyingInt1, m_varyingSlope_d)
  DataFrame(;
    name = nms, 
    dof=dof.(mods),
    deviance=round.(deviance.(mods), digits=0),
    AIC=round.(aic.(mods),digits=0),
    AICc=round.(aicc.(mods),digits=0),
    BIC=round.(bic.(mods),digits=0),
    χ²=vcat(:., round.(lrt.tests.deviancediff, digits=0)),
    χ²_dof=vcat(:., round.(lrt.tests.dofdiff, digits=0)),
    pvalue=vcat(:., round.(lrt.tests.pvalues, digits=3))
  )
end

```
Now it gets tricky: referring to BIC m_varyingInt1 wins, but referring to AIC, the model with the drift random slope wins... Going for BIC.


### Model selection
```{julia}
#| label: main_effects
m_varyingInt1
```
Nothing reaches significance. Running bootstrap

## Bootstrapping
```{julia}
samples = parametricbootstrap(RNG, N_iterations, m_varyingInt1)
tbl = samples.tbl
```

```{julia}
confint(samples)
```

Visualizing 95% CIs individually for every covariate.
```{julia}
ridgeplot(samples; show_intercept=false, xlabel="Bootstrap density and 95%CI")
```
No significant effect found. N_fixations cannot be predicted with the covariates at hand.

# Predicting N_saccades

```{julia}
#| label: m_varyingInt1

m_varyingInt1 = let
    varInt = @formula(N_saccades ~ 1 + level_difficulty * drift + input_noise + N_consecutive_crash_success + (1 | ID));
    fit(MixedModel, varInt, my_data; contrasts=my_cake);
  end

issingular(m_varyingInt1) # Not overparamterized
VarCorr(m_varyingInt1)
last(m_varyingInt1.λ)

```

## Exploring random slope effects

```{julia}
#| label: m_varyingSlope_complex

m_varyingSlope_complex = let
    varInt = @formula(N_saccades ~ 1 + level_difficulty * drift + input_noise + N_consecutive_crash_success + 
    (1 + level_difficulty * drift + input_noise + N_consecutive_crash_success | ID));
    fit(MixedModel, varInt, my_data; contrasts=my_cake);
  end

issingular(m_varyingSlope_complex) # overparamterized

```
We detect singularity. Proceeding by deleting interaction term within random effects structure.

```{julia}
#| label: m_varyingSlope_complex_ni

m_varyingSlope_complex_ni = let
    varInt = @formula(N_saccades ~ 1 + level_difficulty * drift + input_noise + N_consecutive_crash_success + 
    (1 + level_difficulty + drift + input_noise + N_consecutive_crash_success | ID));
    fit(MixedModel, varInt, my_data; contrasts=my_cake);
  end

issingular(m_varyingSlope_complex_ni) # overparamterized

```
Still overparameterized. Stating zerocorr.

```{julia}
#| label: m_varyingSlope_complex_zc

m_varyingSlope_complex_zc = let
    varInt = @formula(N_saccades ~ 1 + level_difficulty * drift + input_noise + N_consecutive_crash_success + 
    zerocorr(1 + level_difficulty + drift + input_noise + N_consecutive_crash_success | ID));
    fit(MixedModel, varInt, my_data; contrasts=my_cake);
  end

issingular(m_varyingSlope_complex_zc) # overparamterized

```
Didn't solve it. Proceeding by deleting individual random slope effects.

Deleted:
- N_consecutive_crash_success
- input_noise
- drift
- level_difficulty

- level_difficulty + N_consecutive_crash_success
- ... nothing works

```{julia}
#| label: m_varyingSlope_

m_varyingSlope_ = let
    varInt = @formula(N_saccades ~ 1 + level_difficulty * drift + input_noise + N_consecutive_crash_success + 
    zerocorr(1 + ? | ID));
    fit(MixedModel, varInt, my_data; contrasts=my_cake);
  end

issingular(m_varyingSlope_) # overparamterized
#VarCorr(m_varyingSlope_)
#last(m_varyingSlope_.λ)

```

## Model selection
Sticking to m_varyingInt1. 
```{julia}
m_varyingInt1
```
No main effect is significant.

## Bootstrapping
```{julia}
samples = parametricbootstrap(RNG, N_iterations, m_varyingInt1)
tbl = samples.tbl
```

```{julia}
confint(samples)
```

Visualizing 95% CIs individually for every covariate.
```{julia}
ridgeplot(samples; show_intercept=false, xlabel="Bootstrap density and 95%CI")
```
No significant effect found. N_saccades cannot be predicted with the covariates at hand.


